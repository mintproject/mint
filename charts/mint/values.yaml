# -- Welcome message for MINT
welcome_message: Welcome to MINT
# -- Default user email
default_user: mint@isi.edu
# -- Service configuration
service:
  # -- Type of Kubernetes service
  type: ClusterIP
  # -- Port number for the service
  port: 80
# -- Hostname for the application
hostname: localhost
# -- Enable or disable ARM support
arm_support: false
components:
  backups:
    # -- Enable or disable backups
    enabled: false
  cromo:
    # -- Enable or disable Cromo
    enabled: false
    image:
      # -- Docker image repository for Cromo
      repository: mintproject/cromo
      # -- Docker image tag for Cromo
      tag: 3c75586989aedf2573c37f5352f960c294377931
      # -- Image pull policy for Cromo
      pullPolicy: IfNotPresent
    ingress:
      # -- Enable or disable ingress for Cromo
      enabled: true
      className: ""
      annotations:
        nginx.ingress.kubernetes.io/enable-cors: "true"
      hosts:
        - host: cromo.mint.local
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls: []
    # -- Resource specifications for Cromo
    resources: {}
  mic_ui:
    # -- Enable or disable MIC UI
    enabled: false
    image:
      # -- Docker image repository for MIC UI
      repository: mintproject/mic-web
      # -- Docker image tag for MIC UI
      tag: a736ac5841d471de4679bec80c13b0fb646ae073
      # -- Image pull policy for MIC UI
      pullPolicy: IfNotPresent
      environment:
        # -- API URL for MIC UI
        api_url: null
        # -- Airflow URL for MIC UI
        airflow_url: https://airflow.mint.isi.edu/api/v1
    ingress:
      # -- Enable or disable ingress for MIC UI
      enabled: true
      className: ""
      annotations: {}
      hosts:
        - host: mic.mint.local
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls: []
    # -- Resource specifications for MIC UI
    resources: {}
  # -- MIC API component configuration
  mic_api:
    # -- Enable or disable MIC API
    enabled: false
    image:
      # -- Docker image repository for MIC API
      repository: mintproject/mic-api
      # -- Docker image tag for MIC API
      tag: ee71a1a364fc3d384f85243684ad95d37913b049
      # -- Image pull policy for MIC API
      pullPolicy: IfNotPresent
    ingress:
      # -- Enable or disable ingress for MIC API
      enabled: true
      className: ""
      annotations:
        nginx.ingress.kubernetes.io/enable-cors: "true"
      hosts:
        - host: api.mic.mint.local
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls: []
    # -- Resource specifications for MIC API
    resources: {}
  mic_api_db:
    image:
      # -- Docker image repository for MIC API database
      repository: postgres
      # -- Docker image tag for MIC API database
      tag: 14.6
      # -- Image pull policy for MIC API database
      pullPolicy: IfNotPresent
    # -- Resource specifications for MIC API database
    resources: {}
    persistence:
      # -- Subpath for MIC API database
      subPath: ""
      # -- Enable or disable persistence for MIC API database
      enabled: true
      # -- Storage class for MIC API database
      storageClass: ""
      # -- Access modes for MIC API database
      accessModes:
        - ReadWriteOnce
      # -- Size for MIC API database
      size: 10Gi
      dataSource: {}
      # -- Existing claim for MIC API database
      existingClaim: ""
      selector: {}
      annotations:
        helm.sh/resource-policy: keep
  # -- Data Catalog component configuration
  data_catalog:
    # -- Enable or disable Data Catalog
    enabled: true
    image:
      # -- Docker image repository for Data Catalog
      repository: mintproject/data-catalog
      # -- Docker image tag for Data Catalog
      tag: 9be70359feabe03ed55bfdbf92c20a7e43ab928b
      # -- Image pull policy for Data Catalog
      pullPolicy: IfNotPresent
    arm_image:
      # -- Docker image repository for ARM-based Data Catalog
      repository: mintproject/data-catalog
      # -- Docker image tag for ARM-based Data Catalog
      tag: 8a6af95cae183320d596dc5219f2f76d1f234749
      # -- Image pull policy for ARM-based Data Catalog
      pullPolicy: IfNotPresent
    # -- Resource specifications for Data Catalog
    resources: {}
    ingress:
      # -- Enable or disable ingress for Data Catalog
      enabled: true
      className: ""
      annotations:
        nginx.ingress.kubernetes.io/enable-cors: "true"
      hosts:
        - host: datacatalog.mint.local
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls: []
  data_catalog_db:
    image:
      # -- Docker image repository for Data Catalog database
      repository: mintproject/data-catalog-db
      # -- Docker image tag for Data Catalog database
      tag: 9be70359feabe03ed55bfdbf92c20a7e43ab928b
      # -- Image pull policy for Data Catalog database
      pullPolicy: IfNotPresent
    arm_image:
      # -- Docker image repository for ARM-based Data Catalog database
      repository: mintproject/data-catalog-db
      # -- Docker image tag for ARM-based Data Catalog database
      tag: 8a6af95cae183320d596dc5219f2f76d1f234749
      # -- Image pull policy for ARM-based Data Catalog database
      pullPolicy: IfNotPresent
    # -- Resource specifications for Data Catalog database
    resources: {}
    persistence:
      # -- Enable or disable persistence for Data Catalog database
      enabled: true
      storageClass: ""
      accessModes:
        - ReadWriteOnce
      size: 30Gi
      dataSource: {}
      existingClaim: ""
      selector: {}
      subPath: ""
      annotations:
        helm.sh/resource-policy: keep
  model_catalog_endpoint:
    # -- Enable or disable Model Catalog Endpoint
    enabled: true
    image:
      # -- Docker image repository for Model Catalog Endpoint
      repository: mintproject/model-catalog-endpoint
      # -- Docker image tag for Model Catalog Endpoint
      tag: 29256555a6fbaefae4729d5cd259564708a4ab04
      # -- Image pull policy for Model Catalog Endpoint
      pullPolicy: IfNotPresent
    # -- Resource specifications for Model Catalog Endpoint
    resources: {}
    environment:
      # -- Dataset name for Model Catalog Endpoint Apache Jena Fuseki
      dataset: modelcatalog
      # -- Graph base URL for Model Catalog Endpoint. The triples are stored in this graph
      graph_base: http://endpoint.mint.isi.edu/modelCatalog-1.8.0/data/
      # -- Prefix URL for Model Catalog Endpoint
      prefix: https://w3id.org/okn/i/mint/
      # -- Backup file path for Model Catalog Endpoint
      backup_file: /fuseki-base/seeds/model-catalog.trig
      # -- Seeds URL for Model Catalog Endpoint
      seeds_url: https://raw.githubusercontent.com/mintproject/model-catalog-endpoint/main/data/model-catalog.trig
    ingress:
      # -- Enable or disable ingress for Model Catalog Endpoint
      enabled: true
      className: ""
      annotations:
        nginx.ingress.kubernetes.io/enable-cors: "true"
      hosts:
        - host: endpoint.models.mint.local
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls: []
    persistence:
      # -- Enable or disable persistence for Model Catalog Endpoint
      enabled: true
      storageClass: ""
      accessModes:
        - ReadWriteOnce
      size: 20Gi
      dataSource: {}
      existingClaim: ""
      selector: {}
      annotations:
        helm.sh/resource-policy: keep
  hasura:
    # -- Enable or disable Hasura
    enabled: true
    image:
      # -- Docker image repository for Hasura
      repository: mintproject/graphql-engine
      # -- Docker image tag for Hasura
      tag: b30a80c3a1e94031c85e7d17a0c9b6f14bdfc618
      # -- Image pull policy for Hasura
      pullPolicy: IfNotPresent
    # -- Resource specifications for Hasura
    resources: {}
    environment:
      # -- Enable or disable Hasura console
      enable_console: true
      # -- Enable or disable Hasura dev mode
      enable_dev_mode: false
      # -- Unauthorized role for Hasura
      unauthorized_role: anonymous
    # -- Authentication configuration for Hasura
    auth:
      # -- Authentication type (jwt or webhook)
      type: jwt
      jwt:
        # -- JWT claims configuration
        claims:
          namespace: "https://hasura.io/jwt/claims"
      webhook:
        # -- Webhook service configuration
        service:
          image:
            # -- Docker image repository for auth webhook
            repository: ghcr.io/in-for-disaster-analytics/hasura-tapis-auth-webhook
            # -- Docker image tag for auth webhook
            tag: 1.0.0
            # -- Image pull policy for auth webhook
            pullPolicy: IfNotPresent
          # -- Resource specifications for auth webhook
          resources: {}
        config:
          # -- JWKS URI for Tapis authentication
          tapisJwksUri: "https://tacc.tapis.io/v3/tenants/tacc"
          # -- Token issuer for Tapis authentication
          tapisTokenIssuer: "https://tacc.tapis.io/v3/tokens"
    ingress:
      # -- Enable or disable ingress for Hasura
      enabled: true
      className: null
      annotations:
        nginx.ingress.kubernetes.io/enable-cors: "true"
      hosts:
        - host: graphql.mint.local
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls: []
  hasura_db:
    image:
      # -- Docker image repository for Hasura database
      repository: postgis/postgis
      # -- Docker image tag for Hasura database
      tag: 10-3.2-alpine
      # -- Image pull policy for Hasura database
      pullPolicy: IfNotPresent
    arm_image:
      # -- Docker image repository for ARM-based Hasura database
      repository: imresamu/postgis-arm64
      # -- Docker image tag for ARM-based Hasura database
      tag: 12-3.4-alpine
      # -- Image pull policy for ARM-based Hasura database
      pullPolicy: IfNotPresent
    # -- Resource specifications for Hasura database
    resources: {}
    persistence:
      # -- Subpath for Hasura database
      subPath: ""
      # -- Enable or disable persistence for Hasura database
      enabled: true
      storageClass: ""
      accessModes:
        - ReadWriteOnce
      size: 30Gi
      dataSource: {}
      existingClaim: ""
      selector: {}
      annotations:
        helm.sh/resource-policy: keep
  model_catalog_explorer:
    # -- Enable or disable Model Catalog Explorer
    enabled: true
    image:
      # -- Docker image repository for Model Catalog Explorer
      repository: mintproject/model-catalog-explorer
      # -- Docker image tag for Model Catalog Explorer
      tag: 0b2f9f0a9124076aeb492add2f123d0757066f6b
      # -- Image pull policy for Model Catalog Explorer
      pullPolicy: IfNotPresent
    # -- Resource specifications for Model Catalog Explorer
    resources: {}
    ingress:
      # -- Enable or disable ingress for Model Catalog Explorer
      enabled: true
      className: ""
      annotations: {}
      hosts:
        - host: models.mint.local
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls: []
  model_catalog_api:
    # -- Enable or disable Model Catalog API
    enabled: true
    # -- API version for Model Catalog API
    api_version: v1.8.0
    image:
      # -- Docker image repository for Model Catalog API
      repository: mintproject/model-catalog-fastapi
      # -- Docker image tag for Model Catalog API
      tag: 7dd88dc5bf1fe6a6d4703ea0a077afee45cb2561
      # -- Image pull policy for Model Catalog API
      pullPolicy: IfNotPresent
    # -- Resource specifications for Model Catalog API
    resources: {}
    environment:
      # -- Context directory for Model Catalog API
      context_dir: contexts/
      # -- Queries directory for Model Catalog API
      queries_dir: queries/
    ingress:
      # -- Enable or disable ingress for Model Catalog API
      enabled: true
      className: ""
      annotations:
        nginx.ingress.kubernetes.io/enable-cors: "true"
      hosts:
        - host: api.models.mint.local
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls: []
  ui:
    # -- Enable or disable UI
    enabled: true
    image:
      # -- Docker image repository for UI
      repository: mintproject/mint-ui-lit
      # -- Docker image tag for UI
      tag: 5ec5a06c8bc68634aee3d09f79ac89d228dfd814
      # -- Image pull policy for UI
      pullPolicy: IfNotPresent
    # -- Resource specifications for UI
    resources: {}
    config:
      visualization_url: ""
      ingestion_api: ""
      airflow_api: ""
      airflow_dag_download_thread_id: ""
      execution_component_from_tapis: false
      execution_component_from_tapis_tenant: ""
    ingress:
      # -- Enable or disable ingress for UI
      enabled: true
      className: ""
      annotations: {}
      hosts:
        - host: mint.local
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls: []
  ensemble_manager:
    # -- Enable or disable Ensemble Manager
    enabled: true
    # -- API version for Ensemble Manager
    api_version: v1
    # -- Docker image repository for Ensemble Manager
    image:
      # -- Docker image repository for Ensemble Manager
      repository: mintproject/ensemble-manager
      # -- Docker image tag for Ensemble Manager
      tag: 57cabdf0ee9d8ab46e6fcdac3b619038f739da25
      # -- Image pull policy for Ensemble Manager
      pullPolicy: IfNotPresent
    # -- Ensemble Manager deployment strategy (Recreate or RollingUpdate)
    strategy:
      # -- Type of deployment strategy
      type: Recreate
    # -- Resource specifications for Ensemble Manager
    resources: {}
    # -- Service account name for Ensemble Manager, used to run jobs
    serviceAccountName: default
    environment:
      data_dir: /var/mint
    config:
      graphql:
        endpoint: "localhost:30003/v1/graphql"
        enable_ssl: false
        use_secret: true
      auth:
        client_id: "me3"
        authorization_url: "https://portals.tapis.io/v3/oauth2/authorize"
        public_key: "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw/gduKqo2Pjv6puw1TLxEF/CzVacsBYVGYAeyhNg0opB4ScnDlZhGtG84co/9vBVTtKznoZ+L7a3a4gqFZXY404K0TdkkZkRUWW6uU06oMK22EQxQTCPkI+MgqX6nRE6T2RAixluRGVI2qDP620IFLXJCm7l4ZHCDJITpVADdpAnrDe2y6PuYC9nWz+VXVRNs3rkmEV2aHM6F5PTfT1cOuvWxaDCSdzJUQlUNb2h0fWNVPAz0KETzjx4QQ1XFV5KONaMwSGJ6b4RVefaOVp7fgs35TISiO57pX1Cv9KjW3BFG6CWb2TurLtv4HM+mYIUIk3t1XywUonP1oyXSnwPaQIDAQAB\n-----END PUBLIC KEY-----"
        algorithms: ["RS256"]
      execution_engine:
        type: "localex"
        code_dir: "/home/node/app/data/code"
        data_dir: "/home/node/app/data/data"
        temp_dir: "/home/node/app/data/temp"
        log_dir: "/home/node/app/data/logs"
        data_url: "s3://mintdata"
        log_url: "s3://mintdata"
        parallelism: 2
        wings_export_url: ""
        wings_storage: ""
        wings_dot_path: ""
        wings_ont_url: ""
        # tapis properties
        username: ""
        basePath: ""

    ingress:
      enabled: true
      className: ""
      annotations:
        nginx.ingress.kubernetes.io/enable-cors: "true"
      hosts:
        - host: ensemble-manager.mint.local
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls: []
    persistence:
      name: ensemble-manager
      enabled: true
      storageClass: ""
      size: 10Gi
      dataSource: {}
      accessModes:
        - ReadWriteOnce
      existingClaim: ""
      selector: {}
      annotations:
        helm.sh/resource-policy: keep
jobs:
  model_catalog_endpoint:
    # -- Enable or disable Model Catalog API initialization
    enabled: true
    # -- Resource specifications for Model Catalog API initialization
    resources: {}
  hasura:
    # -- Enable or disable MINT Database initialization
    enabled: true
    # -- Resource specifications for MINT Database initialization
    resources: {}

google:
  maps:
    # -- API key for Google Maps
    key: AIzaSyAkRnERo4F4dy9AhdrWHAN5vdJWs0vZCgM

external_services:
  ckan:
    # -- Enable or disable CKAN service
    enabled: false
    # -- CKAN service configuration
    url: "http://localhost:5000"
    # -- CKAN service type
    type: "CKAN"
    extra:
      # -- Owner organization ID for CKAN service
      owner_organization_id: ""
      # -- Owner provenance ID for CKAN service
      owner_provenance_id: ""
      # -- Default dataset ID for CKAN service. Used by Ensemble Manager to upload data when a task has no dataset_id
      default_dataset_id: ""
  s3:
    # -- Enable or disable S3
    enabled: false
    # -- S3 configuration
    type: "S3"
    # -- S3 region
    region: ""
    # -- S3 bucket
    bucket: ""
  kubernetes:
    # -- Enable or disable Kubernetes service to run jobs used by Ensemble Manager
    enabled: false
    # -- Kubernetes namespace
    namespace: "default"
    # -- Job CPU limit
    cpu_limit: "256m"
    # -- Job memory limit
    memory_limit: "512Mi"
    # -- Toggle for node affinity. The job will be scheduled on the same node as the Ensemble Manager
    node_affinity: true
secrets:
  external_services:
    ckan:
      # -- API key for CKAN service. Used by Ensemble Manager to upload data
      api_key: CHANGEME
    s3:
      # -- Access key for S3. Used by Ensemble Manager to upload data
      access_key: CHANGEME
      # -- Secret key for S3
      secret_key: CHANGEME
  database:
    data_catalog:
      # -- Username for Data Catalog database
      username: datacatalog
      # -- Password for Data Catalog database
      password: CHANGEME
      # -- Database name for Data Catalog database
      database: datacatalog
    model_catalog_endpoint:
      # -- Username for Model Catalog Apache Jena Fuseki database
      username: admin
      # -- Password for Model Catalog Apache Jena Fuseki database
      password: CHANGEME
    hasura:
      # -- Username for Hasura database
      username: hasura
      # -- Password for Hasura database
      password: CHANGEME
      # -- Database name for Hasura database
      database: hasura
    mic_api:
      # -- Username for Mic API database
      username: mic
      # -- Password for Mic API database
      password: CHANGEME
      # -- Database name for Mic API database
      database: mic
  backups:
    # -- S3 configuration for backups of MINT databases
    s3:
      # -- Access key for S3
      access_key: CHANGEME
      # -- Secret key for S3
      secret_key: CHANGEME
      # -- Region for S3
      bucket: CHANGEME
      # -- Bucket for S3
      path: CHANGEME
      # -- Path for S3
      region: null
      # -- Url for S3
      endpoint: example.com
  hasura:
    # -- JWT verification secret for Hasura (only used when auth.type is jwt)
    jwt_secret: '{"type": "RS256", "key": "-----BEGIN CERTIFICATE-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmyQQ56WKKsVCUs8n9swlv5DV7st7UUdvNoDSnwovdU2vinQQ686//vRqlUJ5vpyI7r75qTXCPkXUitDhPvGEMfChnb9tuWdymSyZmMmT+34oaYo/2bGSZjTlLRVfRJjUnFYeWoVLoXVKJolyDWtU6bXbFNnUyysb/6YIpg5sSwxkLs/9yl6HsWdFconxPJO6KmMPSjcOc0fZermNq+cOEvj1OqRhVkxDqBebreI+zcgrJHNSN8d6cxTmfVQl1jIPHvxE5oN7qUdfYmK4D+SOlj8FlkUvwis+3Ix2AQsvNoOD1OzuqUOd/FpXBnEGaeTq9EMwDxplNqltR/qT3/poUwIDAQAB\n-----END CERTIFICATE-----", "allowed_skew": 2}'
    # -- Admin secret for Hasura used to access the console
    admin_secret: CHANGEME
auth:
  # DEPRECATED OPTION - realm
  realm: ""
  url: ""
  ui_client_id: ""
  # -- Provider for authentication service: "tapis" or "keycloak"
  provider: "tapis"
  # -- Auth server
  server: "https://portals.tapis.io"
  # -- URL for authentication service
  client_id: mint-local
  # -- Token URL for authentication service
  token_url: /v3/oauth2/token
  # -- Authorization URL for authentication service
  auth_url: /v3/oauth2/authorize
  # -- Discovery URL for authentication service
  discovery_url: /v3/oauth2/.well-known/oauth-authorization-server
  # -- Logout URL for authentication service
  logout_url: /v3/oauth2/tokens/revoke
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  create: true
  annotations: {}
  name: ""
podAnnotations: {}
podSecurityContext: {}
securityContext: {}
resources: {}
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}
